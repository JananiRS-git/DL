import torch
import torch.nn as nn
import numpy as np
data = torch.tensor([
    [1, 1, 0, 0, 0, 0],  
    [1, 0, 0, 1, 0, 0],   
    [0, 0, 1, 0, 1, 0],   
    [0, 1, 0, 0, 0, 1],   
    [1, 0, 1, 0, 0, 0],   
], dtype=torch.float)
num_users, num_movies = data.shape
num_hidden = 4  
class RBM():
    def __init__(self, n_vis, n_hid):
        self.W = torch.randn(n_hid, n_vis) * 0.1
        self.a = torch.zeros(1, n_hid)  
        self.b = torch.zeros(1, n_vis)  
    def sample_h(self, x):
        wx = torch.mm(x, self.W.t()) + self.a
        prob_h_given_v = torch.sigmoid(wx)
        return prob_h_given_v, torch.bernoulli(prob_h_given_v)

    def sample_v(self, y):
        wy = torch.mm(y, self.W) + self.b
        prob_v_given_h = torch.sigmoid(wy)
        return prob_v_given_h, torch.bernoulli(prob_v_given_h)

    def train(self, v0, vk, ph0, phk, lr=0.1):
        self.W += lr * ((torch.mm(ph0.t(), v0) - torch.mm(phk.t(), vk)))
        self.b += lr * torch.sum((v0 - vk), 0)
        self.a += lr * torch.sum((ph0 - phk), 0)
rbm = RBM(n_vis=num_movies, n_hid=num_hidden)
epochs = 5000
for epoch in range(epochs):
    v0 = data
    ph0,_ = rbm.sample_h(v0)
    vk = v0
    for k in range(1):  # CD-1
        _,hk = rbm.sample_h(vk)
        _,vk = rbm.sample_v(hk)
    phk,_ = rbm.sample_h(vk)
    rbm.train(v0, vk, ph0, phk, lr=0.05)
print("âœ… Training completed!")
user = data[0:1]  
_,h = rbm.sample_h(user)
pred, _ = rbm.sample_v(h)
print("\nOriginal User 1 movies:", user.numpy())
print("Predicted User 1 preferences:", pred.detach().numpy().round(2))
recommendations = torch.argsort(pred[0], descending=True)
print("\nðŸŽ¬ Recommended Movies for User 1:")
for idx in recommendations:
    if user[0][idx] == 0: 
        print(f"Movie {idx.item()+1} (score {pred[0][idx].item():.2f})")