import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
data = {
    "text": [
        "Win money now!!!", "Limited offer claim prize", "Meeting at 10am", "Lunch with team",
        "Congratulations you won a lottery", "Reminder for project deadline", 
        "Free entry in contest", "Your invoice attached", 
        "Click here to claim reward", "Let's catch up tomorrow"
    ],
    "label": ["spam","spam","ham","ham","spam","ham","spam","ham","spam","ham"]
}
df = pd.DataFrame(data)
vectorizer = TfidfVectorizer(stop_words="english")
X = vectorizer.fit_transform(df["text"])
y = np.where(df["label"] == "spam", 1, 0)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
param_grid = {
    "C": [0.01, 0.1, 1, 10],
    "penalty": ["l1", "l2"],
    "solver": ["liblinear"]
}
grid = GridSearchCV(LogisticRegression(), param_grid, cv=2, scoring="accuracy")
grid.fit(X_train, y_train)
print("Best Hyperparameters:", grid.best_params_)
best_model = grid.best_estimator_
y_pred = best_model.predict(X_test)

print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("\nClassification Report:")
print(classification_report(y_test, y_pred, zero_division=0))

